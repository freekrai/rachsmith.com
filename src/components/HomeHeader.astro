---

---

<script>
  let textCanvas,
    textCtx,
    particlesCanvas,
    particlesCtx,
    width,
    height,
    textPixels,
    motionBtn;
  let motionOff = false;
  const padding = 200;
  const particles = [];
  const increase = (Math.PI * 2) / 100;
  const colors = [
    "#FF1900",
    "#FF8800",
    "#FFCC00",
    "#FFFA00",
    "#D8FF00",
    "#B6FF00",
    "#00FF2E",
    "#00FFA5",
    "#00FFE1",
    "#00DDFF",
    "#057DFF",
    "#9800FF",
    "#D400FF",
    "#FF00E4",
    "#FF008C"
  ];
  let color = 0;
  const maxParticles = 5000;

  function addCanvases() {
    textCanvas = document.createElement("canvas");
    document.body.appendChild(textCanvas);
    textCtx = textCanvas.getContext("2d");
    particlesCanvas = document.createElement("canvas");
    document.body.appendChild(particlesCanvas);
    particlesCtx = particlesCanvas.getContext("2d");
    const heading = document.getElementById("heading");
    textCanvas.style.position = "absolute";
    const rect = heading.getBoundingClientRect();
    console.log(rect);
    textCanvas.width = rect.width;
    textCanvas.height = rect.height;
    textCanvas.style.left = `${rect.x}px`;
    textCanvas.style.top = `${rect.y}px`;
    textCanvas.style.opacity = 0;
    textCanvas.style.pointerEvents = "none";
    particlesCanvas.style.position = "absolute";
    particlesCanvas.style.pointerEvents = "none";
    textCtx.textAlign = "left";
    textCtx.textBaseline = "top";
    textCtx.font = '900 100px Chivo';
    textCtx.fillStyle = "red";
    textCtx.fillText("RACH", 46, -7);
    textCtx.fillText("SMITH", 15, 68);
  }

  function positionCanvas() {
    const rect = heading.getBoundingClientRect();
    width = rect.width;
    height = rect.height;
    particlesCanvas.width = rect.width + padding * 2;
    particlesCanvas.height = rect.height + padding * 2;
    particlesCanvas.style.left = `${rect.x + window.scrollX - padding}px`;
    particlesCanvas.style.top = `${rect.y + window.scrollY - padding}px`;
  }

  function getTextImageData() {
    const pix = textCtx.getImageData(0, 0, width, height).data;
    textPixels = [];
    for (var i = pix.length; i >= 0; i -= 4) {
      if (pix[i] != 0) {
        var x = (i / 4) % width;
        var y = Math.floor(Math.floor(i / width) / 4);

        if (x && x % 4 == 0 && y && y % 4 == 0)
          textPixels.push({
            x: x,
            y: y
          });
      }
    }
  }

  function resetParticle(p) {
    p.x = p.startX;
    p.y = p.startY;
    p.counter = 0;
    p.color = colors[color];
  }

  function launchParticle(x, y) {
    const p = { x, y, startX: x, startY: y };
    p.speed = 0.6;
    p.waveSize = 5 + Math.random() * 5;
    p.counter = 0;
    p.color = colors[color];
    p.life = 4 + Math.random() * 6;
    particles.push(p);
  }

  function launchParticles(i) {
    const d = 20;
    for (var pi = i; pi < textPixels.length; pi += d) {
      launchParticle(
        textPixels[pi].x - 2 + padding,
        textPixels[pi].y - 2 + padding
      );
    }
    if (particles.length < maxParticles) {
      let ni = i + 1;
      if (ni > d) ni = 0;
      if (!motionOff) requestAnimationFrame(() => launchParticles(ni));
    }
  }

  function clearCanvas() {
    particlesCtx.clearRect(0, 0, width + padding * 2, width + padding * 2);
  }

  function animate(t) {
    clearCanvas();

    for (var i = 0; i < particles.length; i++) {
      const p = particles[i];
      particlesCtx.fillStyle = p.color;
      p.counter += increase;
      p.x += p.speed;
      p.y = p.y - (Math.sin(p.counter) / 25) * p.waveSize;
      p.y -= p.speed;

      particlesCtx.fillRect(p.x, p.y, 4, 4);

      if (p.counter > p.life) resetParticle(p);
    }

    if (!motionOff) requestAnimationFrame(animate);
  }

  function changeColor() {
    if (color === colors.length - 1) {
      color = 0;
    } else {
      color++;
    }
    setTimeout(changeColor, 700);
  }


  window.onload = function () {
    initMotionButton();

    document.fonts.ready.then(function () {
      initializeHeaderAnimation();
    });
  };

  function initializeHeaderAnimation() {
    addCanvases();
    positionCanvas();
    getTextImageData();
    if (!motionOff) startAnimation();
  }

  function startAnimation() {
    launchParticles(0);
    changeColor();
    animate();
  }

  window.onresize = function () {
    positionCanvas();
  };

  document.addEventListener("scroll", function () {
    positionCanvas();
  });

  function toggleMotion() {
    motionOff = !motionOff;
    if (motionOff) {
      motionBtn.innerHTML = "Turn motion on";
    } else {
      motionBtn.innerHTML = "Turn motion off";
      startAnimation();
    }
    if (window.localStorage) {
      window.localStorage.setItem("motion", motionOff ? "off" : "on");
    }
  }

  function initMotionButton() {
    motionBtn = document.getElementById("motion");
    if (window.localStorage) {
      if (window.localStorage.getItem("motion") == "off") {
        motionOff = true;
        motionBtn.innerHTML = "Turn motion on";
      }
    }
    motionBtn.addEventListener('click', () => {
      toggleMotion();
    })
  }



</script>

<div class="controls"><button id="motion">Turn motion off</button></div>

<h1 id="heading">Rach Smith</h1>
<p>
  Hi üëãüèº &nbsp;I'm Rach. A{' '}
  <a href="/full-stack-t-shaped-comb-shaped-developer-or-engineer/">
    developer
  </a>{' '}
  building software for CodePen, wife, mother of two, productivity nerd and recovering
  screen addict. This is my digital garden.
</p>
<p>
  I am in process of redesigning this website in public. It has been
  stripped back to the bare minimum and I will make gradual improvements as
  time goes on. You can follow the changes or suggest your own at the{' '}
  <a href="https://github.com/rachsmithcodes/rachsmith.com">GitHub repo</a>.
</p>
<p>
  <a href="/all-notes/"> See all the notes </a>&nbsp;
  <a href="https://feedly.com/i/subscription/feed/https://rachsmith.com/rss/">
    Subscribe to RSS feed
  </a>
</p>

<style>
  h1 {
    font-family: "Chivo", sans-serif;
    font-weight: 900;
    font-size: 100px;
    width: 6ch;
    text-align: center;
    line-height: 0.75;
    margin: 0 auto;
    margin-top: 1.5em;
    position: relative;
    z-index: 100;
    text-transform: uppercase;
    margin-bottom: 0.7em;
  }

  .controls {
    text-align: right;
  }

  .controls button {
    padding: 0.2rem 0.5rem;
    border: 1px solid #444767;
    border-radius: 0.317rem;
    background-color: #fff;
    color: #444767;
    ;
    text-decoration: none;
  }

  a {
    position: relative;
    display: inline-block;
    color: #000;
    text-decoration: none;
    background-image: linear-gradient(130deg,
        #ffcc00,
        #00ffa5 41.07%,
        #d400ff 76.05%);
    background-repeat: no-repeat;
    background-size: 100% 0.15em;
    background-position: 0 88%;
    transition: background-size 0.2s ease-in-out;
  }

  a:hover {
    background-size: 100% 0.4em;
  }
</style>